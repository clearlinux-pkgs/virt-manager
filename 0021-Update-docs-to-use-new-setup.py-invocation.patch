From 3cb33d381c0097be6ec1bd496ede25a0d1c339af Mon Sep 17 00:00:00 2001
From: Cole Robinson <crobinso@redhat.com>
Date: Tue, 6 Feb 2018 18:59:48 -0500
Subject: [PATCH 21/45] Update docs to use new setup.py invocation

---
 HACKING.md | 10 +++++-----
 INSTALL.md | 12 ++++++------
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/HACKING.md b/HACKING.md
index e3ed9e53..66b266ca 100644
--- a/HACKING.md
+++ b/HACKING.md
@@ -2,8 +2,8 @@
 
 The following commands will be useful for anyone writing patches:
 ```sh
-python setup.py test      # Run local unit test suite
-python setup.py pylint    # Run a pylint script against the codebase
+./setup.py test      # Run local unit test suite
+./setup.py pylint    # Run a pylint script against the codebase
 ```
 
 Any patches shouldn't change the output of 'test' or 'pylint'. The
@@ -14,7 +14,7 @@ so it could throw some false positives or useless messages. If you think
 your patch exposes one of these, bring it up on the mailing list.
 
 'test*' have a `--debug` option if you are hitting problems.
-For more options, use `python setup.py test --help`.
+For more options, use `./setup.py test --help`.
 
 One useful way to manually test virt-manager's UI is using libvirt's
 unit test driver. From the source directory, Launch virt-manager like:
@@ -28,8 +28,8 @@ having to alter your host virt config.
 
 Also, there's a few standalone specialty tests:
 ```sh
-python setup.py test_urls            # Test fetching media from distro URLs
-python setup.py test_initrd_inject   # Test --initrd-inject
+./setup.py test_urls            # Test fetching media from distro URLs
+./setup.py test_initrd_inject   # Test --initrd-inject
 ```
 
 We use [glade-3](https://glade.gnome.org/) for building virt-manager's UI.
diff --git a/INSTALL.md b/INSTALL.md
index 399dd11b..983e32ce 100644
--- a/INSTALL.md
+++ b/INSTALL.md
@@ -8,19 +8,19 @@ changes, it can be done from the source directory:
 
 To install the software into `/usr/local` (usually), you can do:
 ```sh
-python setup.py install
+./setup.py install
 ```
 
 To build an RPM, you can run:
 ```sh
-python setup.py rpm
+./setup.py rpm
 ```
 
 `setup.py` generally has all the build and install commands, for more info see:
 
-   - `python setup.py --help-commands`
-   - `python setup.py install --help`
-   - [Python Standard Build and Install](https://docs.python.org/2/install/#standard-build-and-install)
+   - `./setup.py --help-commands`
+   - `./setup.py install --help`
+   - [Python Standard Build and Install](https://docs.python.org/3/install/#standard-build-and-install)
 
 
 ## Pre-requisite software
@@ -30,7 +30,7 @@ A detailed dependency list can be found in
 
 Minimum version requirements of major components:
 
-   - python >= 2.7
+   - python >= 3.3
    - gtk3 >= 3.14
    - libvirt-python >= 0.6.0
    - pygobject3 >= 3.14
-- 
2.16.2

